---
version: '3'
services:

  # REQUIRED for kafka
  # Apache zookeeper does what now?
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # REQUIRED for kafka
  # The kafka broker
  broker:
    image: confluentinc/cp-server:6.1.1
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    # If disconnected from a volume, rebuilding will reset
    # volumes:
    #   - kafka-data:/var/lib/kafka/data

  # REQUIRED for kafka
  # Registry for kafka message schemas
  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # # RESTful proxy for kafka
  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:6.1.1
  #   hostname: rest-proxy
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - 8082:8082
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  # Web front-end
  nginx:
    image: nginx
    volumes:
      # Define a base nginx path in our subdirectory
      - ./nginx:/etc/nginx
      # Django static files are in a docker volume
      - web-static:/etc/nginx/html/static
    ports:
      # The main web interface
      - 8080:80
      # HTTPS
      - 8443:443
      # Super simple nginx server
      # - 8181:81

  # Postgres database
  postgres:
    image: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 8432:5432

  # Redis key/value store
  redis:
    image: redis
    ports:
      - 6379:6379

  # # Prometheus metrics
  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus/config:/etc/prometheus
  #     - prometheus:/prometheus
  #   ports:
  #     - "9091:9090"

  # # Grafana metrics front-end
  # grafana:
  #   image: grafana/grafana:latest
  #   volumes:
  #     - grafana:/var/lib/grafana
  #     - ./grafana/config:/etc/grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     GF_INSTALL_PLUGINS: "grafana-worldmap-panel"

  ####
  # Example data service containers
  ####

  # Example web interfaces (collection and distribution)
  example-web:
    # GitHub repository image
    image: ghcr.io/earthscope/es-example-django:main
    # Or link/submodule to a subdirectory
    # build: es-example-django
    command: gunicorn -c ./gunicorn.conf.py
    volumes:
      # AVRO schemas
      - ./avro_schemas:/avro_schemas:ro
      # The django image includes a static filepath
      - web-static:/web-static
      # For local development, can link to sources
      # - ./es-example-django:/es-example-django
    environment:
      # Archive (postgres) config (for distribution)
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # Kafka config (for collection)
      - BOOTSTRAP_SERVERS=broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - AVRO_SCHEMAS_ROOT=/avro_schemas
    ports:
      - 8100:8000
      - 9100:9000

  # Example data archiver
  example-archiver:
    # GitHub repository image
    image: ghcr.io/earthscope/es-example-django:main
    # Or link/submodule to a subdirectory
    # build: es-example-django
    command: python manage.py run_kafka_consumer
    depends_on:
      - broker
      - schema-registry
    volumes:
      # AVRO schemas
      - ./avro_schemas:/avro_schemas:ro
      # For local development, can link to sources
      # - ./es-example-django:/es-example-django
    environment:
      # Archive (postgres) config
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      # Kafka config
      - BOOTSTRAP_SERVERS=broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - AVRO_SCHEMAS_ROOT=/avro_schemas

    
# Volumes are local by default, but could be backed by test/prod datasources
volumes:
  kafka-data:
  postgres-data:
  web-static:
  prometheus:
  grafana:
