upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response

  # for UNIX domain socket setups
  # server unix:/tmp/gunicorn.sock fail_timeout=0;

  # for a TCP configuration
  server django-web:8000 fail_timeout=0;
}

upstream vouch {
  # set this to location of the vouch proxy
  server vouch-proxy:9090;
}

server {
  # use 'listen 80 deferred;' for Linux
  # use 'listen 80 accept_filter=httpready;' for FreeBSD
  listen 80;
  client_max_body_size 4G;

  # set the correct host(s) for your site
  server_name localhost nginx example.com www.example.com;

  keepalive_timeout 5;

  auth_request_set $auth_user $upstream_http_x_vouch_user;

  # Application proxy
  location ~ ^/(example|admin|user) {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $http_host;
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://app_server;
  }

  # Vouch-proxy paths
  location ~ ^/(auth|login|logout) {
    proxy_pass http://vouch;
    proxy_set_header Host $http_host;
   }

  # Vouch-proxy
  location = /vouch-validate {
    internal;
    # This address is where Vouch will be listening on
    proxy_pass http://vouch/validate;
    proxy_pass_request_body off; # no need to send the POST body

    proxy_set_header Content-Length "";
    proxy_set_header Host $http_host; # This is required according to the Vouch-Proxy official example
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # these return values are passed to the @error401 call
    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
  }

  # Base nginx behavior
  location / {
    # checks for static file, if not found proxy to app
    root html;
    index index.html;
    ssi on;
  }

  # Handle auth errors by routing to the vouch-proxy login
  error_page 401 = @error401;
  location @error401 {
    return 302 $scheme://$http_host/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
  }

  # Test page forcing validation
  location /secure {
    auth_request /vouch-validate;
    ssi on;
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root /;
  }
}
